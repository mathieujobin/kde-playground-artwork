kate: tab-width 3; indent-mode normal; word-wrap-column 79; indent-spaces off; replace-tabs off;

!!!!!!!!!!!!!!!!!!!!!!! IMPORTANT NOTICE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!! Do not edit this file, instead edit kdevelop-icons.ods, this     !!
!! file is only left for now as reference as it might contain more  !!
!! elaborate comments and information                               !!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

This is a list of icons that are needed by KDevelop, however they vary in
wider applicability. The Oxygen team should make the call as to whether any
particular icon listed here should go in KDevelop's private space or be made
available in the global space. Don't assume that becuase it is listed here,
it needs to be private. :-)

This file is 'refereed' by Matthew Woehlke (mw_triad<AT>users.sourceforge.net).
Please send comments to the lists...
	...from the art/Oxygen side: kde-artists<AT>kde.org
	...from the devel/KDevelop side: kdevelop-devel<AT>kdevelop.org.
I follow both lists and can/will relay as needed.


Legend:
	i	- purely informational (will use a standard icon)
	-	- needs to be drawn
	+	- needs to be drawn (but used only as a base for other icons)
	c	- completed (has been drawn)
	?	- don't draw yet (may not ultimately have an icon)

Icons are listed as '<icon name>' [("<action name, if different>")]

generic needs (referenced later)
-------------
	- 'code block'
		Something representing a block of code
		IDEAS: some stacked building blocks
		
	- 'context'
		Similar to code block, but more specific - it refers to all code within
		a set of brackts {}
		IDEAS: a pair of brackets {}

navigation
----------
	- 'quick open'
		A dialog which allows for navigation to another point in the project(s) 
		open, via a search function.  The specialty 'quick open' actions are
		the same as the main quick open dialog with some filters applied.
		IDEAS: code block on a slant, with horizontal marks to the left
		       indicating that it is moving quickly

	- 'quick open file'
		A dialog which allows for navigation to another file in the project(s) 
		open, via a search function.
		IDEAS: open file icon on a slant, with horizontal marks to the left
		       indicating that it is moving quickly

	- 'quick open class'
		A dialog which allows for navigation to another class in the project(s) 
		open, via a search function.
		IDEAS: class icon (described below) on a slant, with horizontal marks
		       to the left indicating that it is moving quickly

	- 'quick open function'
		A dialog which allows for navigation to another class in the project(s) 
		open, via a search function.
		IDEAS: function icon (described below) on a slant, with horizontal
		       marks to the left indicating that it is moving quickly

	- 'outline'
		A dialog which shows a list of declared objects in a file, and allows
		quick navigation via a search function.
		IDEAS: a sketch or edge drawing of a file, class, etc.

	- 'jump to declaration'
		An action which finds the declaration of the current object and opens
		or switches to that file, and places the cursor at the declaration.
		IDEAS: a curved arrow pointing left to a flag (or something else)

	- 'jump to definition'
		An action which finds the definition of the current object and opens
		or switches to that file, and places the cursor at the declaration.
		IDEAS: a curved arrow pointing right to a code block

	- 'previous visited context'
		An action which navigates to the code context which was previously
		being edited
		IDEAS: a straight arrow pointing left to a context

	- 'next visited context'
		An action which navigates back to the code context which was
		originally being edited before 'previous visited context' was used
		IDEAS: a straight arrow pointing right to a context

	- 'previous use'
		An action which navigates to the previous use of a declaration (ie.,
		class, function, variable etc.)
		IDEAS: a straight arrow pointing left to a variable (described below)

	- 'next use'
		An action which navigates to the next use of a declaration (ie.,
		class, function, variable etc.)
		IDEAS: a straight arrow pointing right to a variable (described below)

project
-------
	+ 'project'
		IDEAS: a simple window

	+ 'new project'
		SHOULD-BE: 'project' with 'new' sparkle

	+ 'open project'
		SHOULD-BE: 'project' with small folder overlayed

	i 'subproject'
		WILL-USE: folder icon

	+ 'target'
		A target is a collection of files (or actions) that can be "built"
		independently. Usually the standard target 'all' consists of all
		constructive targets except 'install' (and possible others, like 'doc',
		'messages', etc). Note that e.g. 'clean' are tecnically targets according
		to the 'make' syntax, although most users will think of a "target" as
		a specific portion of an application to build (for example, 'Kexi' would
		be a target in KOffice).
		IDEAS: a target i.e. a bulls-eye

	- 'close project'
		Closes the current project.
		IDEAS: project icon with the close icon overlaid

	- 'close all projects'
		Closes all open projects.
		IDEAS: project icons with the close icon overlaid


build
-----
	+ 'build_overlay'
		Used as an overlay for actions that involve building something.
		IDEAS: Fat down arrow placed on the lower edge of another icon (usually
		       lower left, maybe lower center as works best aesthetically)

	- 'build' ("build project")
		Builds the project (like 'make')
		SHOULD-BE: 'project' + 'build_overlay'

	- 'build subproject'
		Builds the current subproject (like 'cd subproject/ ; make')
		SHOULD-BE: 'subproject' + 'build_overlay'

	- 'build active' ("build active target")
		Builds the 'active target' (like 'make target')
		SHOULD-BE: 'target' + 'build_overlay'

	- 'compile'
		Compiles a single file
		IDEAS: generic/text/source document icon + 'build_overlay'

	- 'clean'
		Deletes built files ('$ make clean')
		IDEAS: broom
		
	- 'prune'
		Deletes built files and buildsystem files (eg '$ make distclean')
		IDEAS: three brooms

	+ 'configure'
		Generates makefiles out of the high-level build information, so that the
		project can be built by a low-level build tool like 'make'
		IDEAS: like 'build' but with a gear/wrench also

	+ 'install'
		Copies files to their final location (i.e. "installs" the package)
		IDEAS: A cardboard box with an arrow indicating it is to be opened (installed)

	? 'install as root'
		IDEAS: 'install' plus whatever is used to represent root privileges
		(a key in KDE3)

debug
-----
	i 'run', 'break', 'stop', 'restart', 'run to cursor'
		WILL-USE: media-playback-*

	+ 'resume'
		opposite of 'pause' (i.e. 'not restart')
		IDEAS: pause with circle+slash (should become 'media-playback-resume')

	- 'step over'
		Executes one complete line of code, then stops

	- 'step over instruction'
		Executes the next instruction for the current line of code, then stops

	- 'step into'
		Executes one complete line of code, stopping if a function is entered
		or once the line is finished

	- 'step into instruction'
		Executes the next instruction for the current line of code, stopping 
		if a function is entered or once the instruction is finished

	- 'step out'
		Executes code until the current function returns, then stops.

	- 'set execution point to cursor'
		Changes the instruction-pointer to the line of code under the cursor,
		ie. make the next executed code be the code at the cursor position.

	- 'breakpoint'
		indicates a line where the debugger will halt execution (action is to
		toggle)
		IDEAS: traffic stop sign

	- 'clear breakpoints'
		IDEAS: 'breakpoint' with a broom over it

misc
----
	- 'sync to folder'
		Used in places where the user selects a path to set the path to the
		'working directory' (usually the location of the active document)
		Already requested via 'missing oxygen icons' page it seems.
		IDEAS: folder with an arrow pointing into it, e.g.
		       http://lists.kde.org/?l=kde-artists&m=116889123829485&q=p3

	- 'find in files'
		IDEAS: folder with magnifying glass, folder with binnoculars

	- 'documentation'
		A tool view which shows documentation for code objects as they are
		selected.
		IDEAS: an open book

code structure icons
--------------------
	- 'variable'
		Icon representing variables (= single data objects)
		IDEAS: a small cube or rotated rectangle in a rather unobtrusive color

	- 'function'
		Icon representing functions and methods (= executable code)
		IDEAS: a small cube or rotated rectangle in a more vibrant color

	- 'class'
		Icon representing classes
		(= data types that combine multiple variables and methods)
		IDEAS: something that combines multiple (two or three) 'function' and
		       'variable' icons (note that functions and methods are similar in
		       most programming languages), like for example three cubes

	- 'struct'
		Icon representing structs (= data types that combine multiple variables)
		IDEAS: like 'class', but using only 'variable' icons, no 'function's

	- 'interface'
		Icon representing interfaces (= abstract code describing how classes can
		be used; classes that "implement interfaces" have an expected behaviour)
		IDEAS: like 'class', but more transparent / "ghostly"

	- 'typedef'
		Icon representing typedefs (= aliases for existing data types)
		IDEAS: a simple rounded rectangle

	- 'enum'
		Icon representing enumerations
		(= data types defined by which values they can hold)
		IDEAS: a small cube or rectangle with even smaller items
		       (like, one-pixel-high lines) in/on it

	- 'union'
		Icon representing unions (= data types that can hold variables of
		more than one possible data type)
		IDEAS: two intersecting 'typedef' icons

	- 'scope'
		Icon representing scopes and namespaces (= "grouping" of code/classes)
		SHOULD-BE: an opening brace and a closing one

	- 'protected' and 'private' overlays
		Used to indicate the state of a variable or method.
		SHOULD-BE: 'protected': a key, 'private': a lock.
		(hopefully KDE 4 will provide the possibility of easily overlaying
		icons, then we don't have to do icons for every possible combination.)

