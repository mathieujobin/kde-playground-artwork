kate: tab-width 3; indent-mode normal; word-wrap-column 79; indent-spaces off; replace-tabs off;

This is a list of icons that are needed by KDevelop, however they vary in
wider applicability. The Oxygen team should make the call as to whether any
particular icon listed here should go in KDevelop's private space or be made
available in the global space. Don't assume that becuase it is listed here,
it needs to be private. :-)

This file is 'refereed' by Matthew Woehlke (mw_triad<AT>users.sourceforge.net).
Please send comments to the lists...
	...from the art/Oxygen side: kde-artists<AT>kde.org
	...from the devel/KDevelop side: kdevelop-devel<AT>kdevelop.org.
I follow both lists and can/will relay as needed.


Legend:
	i	- purely informational (will use a standard icon)
	-	- needs to be drawn
	+	- needs to be drawn (but used only as a base for other icons)
	c	- completed (has been drawn)
	?	- don't draw yet (may not ultimately have an icon)

Icons are listed as '<icon name>' [("<action name, if different>")]

project
-------
	+ 'project'
		IDEAS: a simple window

	- 'new project'
		SHOULD-BE: 'project' with 'new' sparkle

	- 'open project'
		SHOULD-BE: 'project' with small folder overlayed

	i 'subproject'
		WILL-USE: folder icon

	+ 'target'
		A target is a collection of files (or actions) that can be "built"
		independently. Usually the standard target 'all' consists of all
		constructive targets except 'install' (and possible others, like 'doc',
		'messages', etc). Note that e.g. 'clean' are tecnically targets according
		to the 'make' syntax, although most users will think of a "target" as
		a specific portion of an application to build (for example, 'Kexi' would
		be a target in KOffice).
		IDEAS: a target i.e. a bulls-eye
	
	? 'conditional scope'
		A section in a makefile that's only used if the given condition is true.
		Mainly used as 16x16 icon in a list view.
		IDEAS: a question mark. or maybe a question mark enclosed in braces.

	? 'create conditional scope'
		Used on the button that creates conditional scopes.
		SHOULD-BE: the 'conditional scope' icon with a 'new' sparkle.

build
-----
	+ 'build_overlay'
		Used as an overlay for actions that involve building something.
		IDEAS: Fat down arrow placed on the lower edge of another icon (usually
		       lower left, maybe lower center as works best aesthetically)

	- 'build' ("build project")
		Builds the project (like 'make')
		SHOULD-BE: 'project' + 'build_overlay'

	- 'build subproject'
		Builds the current subproject (like 'cd subproject/ ; make')
		SHOULD-BE: 'subproject' + 'build_overlay'

	- 'build active' ("build active target")
		Builds the 'active target' (like 'make target')
		SHOULD-BE: 'target' + 'build_overlay'

	- 'compile'
		Compiles a single file
		IDEAS: generic/text/source document icon + 'build_overlay'

	- 'clean'
		Deletes built files ('$ make clean')
		IDEAS: broom

	? 'distclean'
		Deletes maintainer-generated files, such as "configure", "Makefile", etc.
		('$ make distclean')
		IDEAS: broom over 'configure' icon

	? 'configure'
		Generates makefiles out of the high-level build information, so that the
		project can be built by a low-level build tool like 'make'
		IDEAS: like 'build' but with a gear/wrench also

	? 'run autotools'
		IDEAS: like 'configure'?

	? 'install'
		Copies files to their final location (i.e. "installs" the package)

	? 'install as root'
		IDEAS: 'install' plus whatever is used to represent root privileges
		(a key in KDE3)

debug
-----
	i 'run', 'break', 'stop', 'restart', 'run to cursor'
		WILL-USE: media-playback-*

	? 'resume'
		opposite of 'pause' (i.e. 'not restart')
		IDEAS: pause with circle+slash (should become 'media-playback-resume')

	- 'step'
		Executes one line of code, then stops

	- 'step instruction'
		Executes exactly one machine instruction, then stops

	- 'step out'
		Completes execution of the current function, stopping when the function
		returns

	- 'step over'

	- 'set next'
		Changes the instruction-pointer to the line of code under the cursor

	- 'breakpoint'
		indicates a line where the debugger will halt execution (action is to
		toggle)
		WILL-USE: process-stop
		NOTE: not marked 'i' because we might want to consider making a copy of
		process-stop with a different name due to 'clear breakpoints' icon
		(unless we support defining the latter as process-stop plus some overlay)

	- 'clear breakpoints'
		IDEAS: 'breakpoint' with a broom over it

misc
----
	- 'sync to folder'
		Used in places where the user selects a path to set the path to the
		'working directory' (usually the location of the active document)
		IDEAS: folder with an arrow pointing into it, e.g.
		       http://lists.kde.org/?l=kde-artists&m=116889123829485&q=p3

	- 'find in files'
		IDEAS: folder with magnifying glass, folder with binnoculars

code structure icons
--------------------
	- 'variable'
		Icon representing variables (= single data objects)
		IDEAS: a small cube or rotated rectangle in a rather unobtrusive color

	- 'function'
		Icon representing functions and methods (= executable code)
		IDEAS: a small cube or rotated rectangle in a more vibrant color

	- 'class'
		Icon representing classes
		(= data types that combine multiple variables and methods)
		IDEAS: something that combines multiple (two or three) 'function' and
		       'variable' icons (note that functions and methods are similar in
		       most programming languages), like for example three cubes

	- 'struct'
		Icon representing structs (= data types that combine multiple variables)
		IDEAS: like 'class', but using only 'variable' icons, no 'function's

	- 'interface'
		Icon representing interfaces (= abstract code describing how classes can
		be used; classes that "implement interfaces" have an expected behaviour)
		IDEAS: like 'class', but more transparent / "ghostly"

	- 'typedef'
		Icon representing typedefs (= aliases for existing data types)
		IDEAS: a simple rounded rectangle

	- 'enum'
		Icon representing enumerations
		(= data types defined by which values they can hold)
		IDEAS: a small cube or rectangle with even smaller items
		       (like, one-pixel-high lines) in/on it

	- 'union'
		Icon representing unions (= data types that can hold variables of
		more than one possible data type)
		IDEAS: two intersecting 'typedef' icons

	- 'scope'
		Icon representing scopes and namespaces (= "grouping" of code/classes)
		SHOULD-BE: an opening brace and a closing one

	- 'protected' and 'private' overlays
		Used to indicate the state of a variable or method.
		SHOULD-BE: 'protected': a key, 'private': a lock.
		(hopefully KDE 4 will provide the possibility of easily overlaying
		icons, then we don't have to do icons for every possible combination.)

