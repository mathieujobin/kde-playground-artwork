<?xml version="1.0" encoding="UTF-8"?>
<cokoon_theme name="TestCaseTheme" spec="CokoonTestSpec" version="0.1pre">

  <object id="ExpTest01" implement="Expressions.test01">
    <!-- Test the variable mechanism, and expression referencing -->
    <expression id="varValue01" value="3"/>
    <expression id="varValue02" value="4"/>
    <expression id="exp" value="var01+var02"/>
    <expression id="expAssert" value=".varValue01+.varValue02"/>
  </object>
  <object id="ExpTest02" implement="Expressions.test02" extend="ExpTest01">
    <!-- Test inherited expressions, and simple expression evaluation -->
    <expression id="exp" value="var01+var02"/>
    <expression id="expAssert" value="7"/>
  </object>
  <object id="ExpTest03" implement="Expressions.test03">
    <!-- Test some more evaluation rules: +/*-%, precedence, ... -->
    <expression id="varValue01" value="0"/>
    <expression id="varValue02" value="0"/>
    <expression id="exp" value="7+4/2+4*(4-3%2)"/>
    <expression id="expAssert" value="7+2+12"/>
  </object>
  <object id="ExpTest04" implement="Expressions.test04" extend="ExpTest03">
    <!-- Test Flating point evaluation... Although the specification sais this should be of type 'Int', this works at the moment. -->
    <expression id="exp" value="7/2"/>
    <expression id="expAssert" value="3.5"/>
  </object>
  <object id="ExpTest05" implement="Expressions.test05">
    <expression id="exp" value="#aaBBcc"/>
    <expression id="expAssert" value="#AAbbCc"/>
  </object>
  <object id="ExpTest06" implement="Expressions.test06">
    <expression id="exp" value="rgb(255,200+55,127*2+1)"/>
    <expression id="expAssert" value="#ffffff"/>
  </object>
  <object id="ExpTest07" impelement="Expressions.test07">
    <expression id="exp" value="rgba(0, 255, 100-50, 2*33)"/>
    <expression id="expAssert" value="rgba(0,255,50,66)"/>
  </object>
  <object id="ExpTest08" implement="Expressions.test08">
    <expression id="exp" value="rgb(255,200+55,127*2+1)"/>
    <expression id="expAssert" value="#ffffff"/>
  </object>
  <object id="ExpTest09" implement="Expressions.test09">
    <expression id="exp" value="2/0"/>
    <expression id="expAssert" value=""/>
  </object>
  <object id="ExpTest10" implement="Expressions.test10">
    <expression id="exp" value="2%0"/>
    <expression id="expAssert" value=""/>
  </object>
  <object id="ExpTest11" implement="Expressions.test11">
    <expression id="exp" value="12%5-5%3*3"/>
    <expression id="expAssert" value="-4"/>
  </object>
  <object id="ExpTest12" implement="Expressions.test12">
    <expression id="exp" value="4+5*2"/>
    <expression id="expAssert" value="14"/>
  </object>
  <object id="ExpTest13" implement="Expressions.test13">
    <expression id="exp" value="1+(3*(2-(6/2)))+3"/>
    <expression id="expAssert" value="1"/>
  </object>
  <object id="ExpTest14" implement="Expressions.test14">
    <expression id="varValue01" value="4"/>
    <expression id="exp" value="var01+5*2"/>
    <expression id="expAssert" value="14"/>
  </object>
  <object id="ExpTest15" implement="Expressions.test15">
    <expression id="exp" value="12%5"/>
    <expression id="expAssert" value="2"/>
  </object>
  <object id="ExpTest16" implement="Expressions.test16">
    <expression id="exp" value="2+max(1+5,2*4)"/>
    <expression id="expAssert" value="10"/>
  </object>
  <object id="ExpTest17" implement="Expressions.test17">
    <expression id="exp" value="min(1+5,2*max(2,1))"/>
    <expression id="expAssert" value="4"/>
  </object>
  <object id="ExpTest18" implement="Expressions.test18">
    <expression id="refvalue" value="10-3"/>
    <source id="decorationsrc" type="pixmap" file="testdeco1-src.xpm"/>
    <tile id="topleft" mode_hor="normal" mode_vert="normal" source_id="decorationsrc" left=".top*2" top="4" width="ExpTest18.refvalue" height=".o.refvalue"/>

    <expression id="objectExp" value=".t.topleft.top+1"/>
    <expression id="objectExp2" value="ExpTest18.t.topleft.top+2"/>
    <expression id="objectExp3" value=".refvalue"/>

    <layout id="bglayout">
      <column type="fixed" fixed_size=".o.refvalue"/>
      <row type="fixed" fixed_size=".o.t.topleft.top">
	<cell type="tile" tile_id="topleft"/>
      </row>
    </layout>


    <expression id="exp" value=".t.topleft.top+1"/>
    <expression id="expAssert" value="5"/>
  </object>
  <object id="ExpTest19" implement="Expressions.test19" extend="ExpTest18">
    <expression id="exp" value="ExpTest18.t.topleft.top+2"/>
    <expression id="expAssert" value="6"/>
  </object>
  <object id="ExpTest20" implement="Expressions.test20" extend="ExpTest18">
    <expression id="exp" value=".refvalue"/>
    <expression id="expAssert" value="7"/>
  </object>

  <object id="CustomObjectNoImplement">
    <!-- Check that Cokoon is able to load objects which do not implement
         anything from the Specification. Such objects are used to
         provide things to other objects -->
  </object>



  <object id="PaintTest01" implement="Painting.test01">
    <expression id="oneplusone" value="1+1"/>

    <expression id="variableExpression" value="5"/>

    <expression id="outermargin" value="5"/>
    <expression id="toprowheight" value=".outermargin"/>

    <source id="decorationsrc" type="pixmap" file="testdeco1-src.xpm"/>
    <source id="svgrc" type="svg" file="svgtest.svg"/>
    <tile id="topleft" mode_hor="normal" mode_vert="normal" source_id="decorationsrc" left="0" top="0" width="5" height=".width"/>
    <tile id="top" mode_hor="tiled" mode_vert="tiled" source_object="" source_id="decorationsrc" left="5" top="0" width="5" height="5"/>
    <tile id="topright" mode_hor="normal" mode_vert="normal" source_id="decorationsrc" left="10" top="0" width="5" height="5"/>
    <tile id="bottomleft" mode_hor="normal" mode_vert="normal" source_id="decorationsrc" left="0" top="10" width="5" height="5"/>
    <tile id="bottom" mode_hor="tiled" mode_vert="tiled" source_id="decorationsrc" left="5" top="10" width="5" height="5"/>
    <tile id="bottomright" mode_hor="normal" mode_vert="normal" source_id="decorationsrc" left="10" top="10" width="5" height="5"/>
    <tile id="left" mode_hor="tiled" mode_vert="tiled" source_id="decorationsrc" left="0" top="5" width="5" height="5"/>
    <tile id="right" mode_hor="tiled" mode_vert="tiled" source_id="decorationsrc" left="10" top="5" width="5" height="5"/>
    <tile id="center" mode_hor="tiled" mode_vert="tiled" source_id="decorationsrc" left="5" top="5" width="5" height="5"/>
    <layout id="bglayout">
      <column type="fixed" fixed_size="2+3"/>
      <column type="expanding"/>
      <column type="fixed" fixed_size="5"/>
      <row type="fixed" fixed_size=".o.toprowheight">
	<cell type="tile" tile_id="topleft"/>
	<cell type="tile" tile_id="top"/>
	<cell type="tile" tile_id="topright"/>
      </row>
      <row type="expanding">
	<cell type="tile" tile_id="left"/>
	<cell type="tile" tile_id="center"/>
	<cell type="tile" tile_id="right"/>
      </row>
      <row type="fixed" fixed_size=".o.variableExpression">
	<cell type="tile" tile_id="bottomleft"/>
	<cell type="tile" tile_id="bottom"/>
	<cell type="tile" tile_id="bottomright"/>
      </row>
    </layout>
    <paint>
      <layer layout_object="" layout_id="bglayout"/>
    </paint>
  </object>

</cokoon_theme>

